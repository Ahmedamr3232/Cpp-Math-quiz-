#include <iostream>
#include <cstdlib>
using namespace std ; 
int randinrange (int from , int to )
{
    int x=rand()%(to-from +1 )+from ;
    return x; 
    
}
enum enlevel{easy =1 , med=2 , hard =3 , mixx =4 };
enum enoperation {add=1,sup=2 , mul=3,divi=4,mix =5};
enum enanswer {right =1 ,wrong =2  };
enum enpass {pass =1 , fail =2 };
struct stroundinfo{
    short quesionnumberr =0 ; 
    short number1 =0; 
    short number2 =0;    
    int   result =0 ;
    int theactualresult =0 ; 
    enoperation operation ; 
    enoperation operationinmatch;
    enlevel level ; 
    enanswer answer; 
};
struct stgameinfo {
    short numberofquesions=0  ; 
    short wronganswers =0 ; 
    short writeanswers=0 ; 
    enoperation operation ; 
    enlevel level ; 
    enpass pass ;
    string theresult =""; 
    
};
enpass checkpass(int rightanswer,int wronganswers)
{
if (rightanswer>wronganswers)
return enpass::pass; 
else 
return 
enpass::fail; 
}
string printpassorfail(enpass pass)
{
    switch (pass)
    {
     case enpass::pass:
     return "you pass the exam ";
     case enpass::fail:
    return "you fail in the exam "; 
        
        
    }
    
}

 stgameinfo fillgameinfo(short numberofquesions,short writeanswers,short wronganswers,enoperation operation,enlevel level )
 {stgameinfo gameinfo; 
 gameinfo.numberofquesions=numberofquesions; 
 gameinfo.wronganswers=wronganswers;
 gameinfo.writeanswers=writeanswers; 
 gameinfo.operation=operation; 
 gameinfo.level= level ; 
 gameinfo.pass=checkpass(writeanswers,wronganswers);
 gameinfo.theresult=printpassorfail(gameinfo.pass);
    return gameinfo ; 
 }
short howmanyrounds ()
{int x ; 
    cout <<"how many quesion to you want "; 
    cin >>x ;
    return x ;
}
enlevel checkthelevel()
{int x; 
  do 
  {cout <<"enter quesions level [1]easy [2]medium [3]hard [4]mix "; 
    cin >>x ;}while (x<1 ||x>4);
    return (enlevel)x ;
}
enoperation checktheoperation ()
{int x; 
do 
{
    cout <<"enter operation type [1]add [2]subtract [3]multiply [4]divition [5]mix"; 
    cin >>x; 
}while (x>5||x<1);
  return (enoperation)x ;   
}
stroundinfo generateeasynymbers(stroundinfo &roundinfo )
{
    roundinfo.number1=randinrange(1,10); 
    roundinfo.number2 =randinrange (1,10 ); 
   return roundinfo ;  
}
stroundinfo generatemednymbers(stroundinfo &roundinfo )
{
    roundinfo.number1=randinrange(15,30); 
    roundinfo.number2 =randinrange (15,30 ); 
   return roundinfo ;  
}
stroundinfo generatehardnymbers(stroundinfo &roundinfo )
{
    roundinfo.number1=randinrange(50,99); 
    roundinfo.number2 =randinrange (50,99 ); 
   return roundinfo ;  
}
stroundinfo generatenumbers (enlevel level , stroundinfo& roundinfo )
{short  x =0 ; 
    switch (level)
    {
        case enlevel::easy :
        return generateeasynymbers(roundinfo); 
        case enlevel::med :
        return generatemednymbers (roundinfo ); 
          case enlevel::hard :
        return generatehardnymbers (roundinfo );
            }
    if (level ==enlevel::mixx )
     x =randinrange (1,3); 
    return generatenumbers((enlevel)x ,roundinfo);
    
    
}
stroundinfo addam (stroundinfo & roundinfo )
{
    roundinfo.theactualresult = roundinfo.number1+roundinfo.number2;  
 roundinfo.operationinmatch=enoperation::add;
 return roundinfo;    
}
stroundinfo sub (stroundinfo & roundinfo )
{
    roundinfo.theactualresult = roundinfo.number1-roundinfo.number2;  
 roundinfo.operationinmatch=enoperation::sup;

 return roundinfo;    
}
stroundinfo mult (stroundinfo & roundinfo )
{
    roundinfo.theactualresult = roundinfo.number1*roundinfo.number2;  
 roundinfo.operationinmatch=enoperation::mul;

 return roundinfo;    
}
stroundinfo divii (stroundinfo & roundinfo )
{
    roundinfo.theactualresult = roundinfo.number1/roundinfo.number2;  
  roundinfo.operationinmatch=enoperation::divi;

 return roundinfo;    
}
stroundinfo operationn (enoperation operation , stroundinfo &roundinfo )
{int x =0; 
    switch (operation)
    {
        case enoperation::add:
        return  addam(roundinfo);
         case enoperation::sup:
        return  sub(roundinfo);
         case enoperation::mul:
        return  mult(roundinfo);
         case enoperation::divi:
        return  divii(roundinfo);
    }
    if (operation ==enoperation::mix)
    {x=randinrange(1,4);
    roundinfo.operationinmatch=(enoperation)x ;
 operationn ( (enoperation)x, roundinfo  );
        return roundinfo ;
        
    }
}
string  newline(int x )
{string word ="";
    for (int i=1 ; i<=x ;i++)
    {word =word+'\n'; 
    }
    return word ;
} 
char changeoperation (enoperation operationn)
{
    char x[4]={'+','-','*','/'};
    return x[(int)operationn -1]; 
}
enanswer checktheanswer(int useranswer , int rightanswer)
{
    if (useranswer==rightanswer)
    return enanswer::right;
    
    else 
    return enanswer::wrong;
    
}
string showresult (enanswer answer , int coumputeranswer)
{switch (answer )
{ case enanswer::right:
return " write answer :-)"; 
case enanswer::wrong :
return " wrong answer :-(\n the right answer is "+to_string (coumputeranswer);
    
}
    
    
}
void checktherightandincreaseit  ( enanswer answer ,int &rightanswers,int &wronganswers)
{
    switch (answer)
    {
        case enanswer::right:
    rightanswers++;
    break; 
    case enanswer::wrong:
    wronganswers++;
        break;
    }
    
}
stgameinfo startround(int howmanyrounds)
{stroundinfo roundinfo; 

    
roundinfo.level =checkthelevel ();

 roundinfo.operation= checktheoperation();
 
 int roundd=0,rightanswers=0 ,wronganswers=0 ; 

 for (int i =1 ; i<=howmanyrounds; i++)
 {generatenumbers(roundinfo.level ,roundinfo);
 operationn(roundinfo.operation,roundinfo);
     cout <<"\nround ["<<roundd+1<<"/"<<howmanyrounds<<"]"<<newline(2); 
 cout <<roundinfo.number1<<newline(1);
 cout <<roundinfo.number2 << "  "<<changeoperation(roundinfo.operationinmatch)<<newline(2);
 cout <<"_________________\n"; 
 cin >>roundinfo.result; 
 enanswer answer=checktheanswer(roundinfo.result, roundinfo.theactualresult);
 cout <<showresult(answer,roundinfo.theactualresult);
 checktherightandincreaseit(answer,rightanswers,wronganswers); 
   roundd++  ;
   
 }
 
 return fillgameinfo(roundd,rightanswers,wronganswers,roundinfo.operation,roundinfo.level);
    
}


int main()
{srand((unsigned)time(NULL));
startround(howmanyrounds());

    return 0;
} 
